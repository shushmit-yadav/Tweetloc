/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-03-26 20:30:19 UTC)
 * on 2015-06-17 at 14:09:54 UTC 
 * Modify at your own risk.
 */

package com.brahminno.tweetloc.backend.tweetApi;

/**
 * Service definition for TweetApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link TweetApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class TweetApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.20.0 of the tweetApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://brahminno.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "tweetApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public TweetApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  TweetApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "contactSync".
   *
   * This request holds the parameters needed by the tweetApi server.  After setting any optional
   * parameters, call the {@link ContactSync#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.brahminno.tweetloc.backend.tweetApi.model.ContactSyncBean}
   * @return the request
   */
  public ContactSync contactSync(com.brahminno.tweetloc.backend.tweetApi.model.ContactSyncBean content) throws java.io.IOException {
    ContactSync result = new ContactSync(content);
    initialize(result);
    return result;
  }

  public class ContactSync extends TweetApiRequest<com.brahminno.tweetloc.backend.tweetApi.model.ContactSyncBean> {

    private static final String REST_PATH = "contactSync";

    /**
     * Create a request for the method "contactSync".
     *
     * This request holds the parameters needed by the the tweetApi server.  After setting any
     * optional parameters, call the {@link ContactSync#execute()} method to invoke the remote
     * operation. <p> {@link
     * ContactSync#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.brahminno.tweetloc.backend.tweetApi.model.ContactSyncBean}
     * @since 1.13
     */
    protected ContactSync(com.brahminno.tweetloc.backend.tweetApi.model.ContactSyncBean content) {
      super(TweetApi.this, "POST", REST_PATH, content, com.brahminno.tweetloc.backend.tweetApi.model.ContactSyncBean.class);
    }

    @Override
    public ContactSync setAlt(java.lang.String alt) {
      return (ContactSync) super.setAlt(alt);
    }

    @Override
    public ContactSync setFields(java.lang.String fields) {
      return (ContactSync) super.setFields(fields);
    }

    @Override
    public ContactSync setKey(java.lang.String key) {
      return (ContactSync) super.setKey(key);
    }

    @Override
    public ContactSync setOauthToken(java.lang.String oauthToken) {
      return (ContactSync) super.setOauthToken(oauthToken);
    }

    @Override
    public ContactSync setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ContactSync) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ContactSync setQuotaUser(java.lang.String quotaUser) {
      return (ContactSync) super.setQuotaUser(quotaUser);
    }

    @Override
    public ContactSync setUserIp(java.lang.String userIp) {
      return (ContactSync) super.setUserIp(userIp);
    }

    @Override
    public ContactSync set(String parameterName, Object value) {
      return (ContactSync) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "forgetMe".
   *
   * This request holds the parameters needed by the tweetApi server.  After setting any optional
   * parameters, call the {@link ForgetMe#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public ForgetMe forgetMe(java.lang.String id) throws java.io.IOException {
    ForgetMe result = new ForgetMe(id);
    initialize(result);
    return result;
  }

  public class ForgetMe extends TweetApiRequest<Void> {

    private static final String REST_PATH = "forgetMe/{id}";

    /**
     * Create a request for the method "forgetMe".
     *
     * This request holds the parameters needed by the the tweetApi server.  After setting any
     * optional parameters, call the {@link ForgetMe#execute()} method to invoke the remote operation.
     * <p> {@link
     * ForgetMe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected ForgetMe(java.lang.String id) {
      super(TweetApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public ForgetMe setAlt(java.lang.String alt) {
      return (ForgetMe) super.setAlt(alt);
    }

    @Override
    public ForgetMe setFields(java.lang.String fields) {
      return (ForgetMe) super.setFields(fields);
    }

    @Override
    public ForgetMe setKey(java.lang.String key) {
      return (ForgetMe) super.setKey(key);
    }

    @Override
    public ForgetMe setOauthToken(java.lang.String oauthToken) {
      return (ForgetMe) super.setOauthToken(oauthToken);
    }

    @Override
    public ForgetMe setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ForgetMe) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ForgetMe setQuotaUser(java.lang.String quotaUser) {
      return (ForgetMe) super.setQuotaUser(quotaUser);
    }

    @Override
    public ForgetMe setUserIp(java.lang.String userIp) {
      return (ForgetMe) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public ForgetMe setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public ForgetMe set(String parameterName, Object value) {
      return (ForgetMe) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getLocation".
   *
   * This request holds the parameters needed by the tweetApi server.  After setting any optional
   * parameters, call the {@link GetLocation#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public GetLocation getLocation() throws java.io.IOException {
    GetLocation result = new GetLocation();
    initialize(result);
    return result;
  }

  public class GetLocation extends TweetApiRequest<com.brahminno.tweetloc.backend.tweetApi.model.LocationBeanCollection> {

    private static final String REST_PATH = "locationbeancollection";

    /**
     * Create a request for the method "getLocation".
     *
     * This request holds the parameters needed by the the tweetApi server.  After setting any
     * optional parameters, call the {@link GetLocation#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetLocation#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected GetLocation() {
      super(TweetApi.this, "GET", REST_PATH, null, com.brahminno.tweetloc.backend.tweetApi.model.LocationBeanCollection.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetLocation setAlt(java.lang.String alt) {
      return (GetLocation) super.setAlt(alt);
    }

    @Override
    public GetLocation setFields(java.lang.String fields) {
      return (GetLocation) super.setFields(fields);
    }

    @Override
    public GetLocation setKey(java.lang.String key) {
      return (GetLocation) super.setKey(key);
    }

    @Override
    public GetLocation setOauthToken(java.lang.String oauthToken) {
      return (GetLocation) super.setOauthToken(oauthToken);
    }

    @Override
    public GetLocation setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetLocation) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetLocation setQuotaUser(java.lang.String quotaUser) {
      return (GetLocation) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetLocation setUserIp(java.lang.String userIp) {
      return (GetLocation) super.setUserIp(userIp);
    }

    @Override
    public GetLocation set(String parameterName, Object value) {
      return (GetLocation) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getRegistrationDetailUsingKey".
   *
   * This request holds the parameters needed by the tweetApi server.  After setting any optional
   * parameters, call the {@link GetRegistrationDetailUsingKey#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetRegistrationDetailUsingKey getRegistrationDetailUsingKey(java.lang.String id) throws java.io.IOException {
    GetRegistrationDetailUsingKey result = new GetRegistrationDetailUsingKey(id);
    initialize(result);
    return result;
  }

  public class GetRegistrationDetailUsingKey extends TweetApiRequest<com.brahminno.tweetloc.backend.tweetApi.model.RegistrationBean> {

    private static final String REST_PATH = "registrationbean/{id}";

    /**
     * Create a request for the method "getRegistrationDetailUsingKey".
     *
     * This request holds the parameters needed by the the tweetApi server.  After setting any
     * optional parameters, call the {@link GetRegistrationDetailUsingKey#execute()} method to invoke
     * the remote operation. <p> {@link GetRegistrationDetailUsingKey#initialize(com.google.api.client
     * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetRegistrationDetailUsingKey(java.lang.String id) {
      super(TweetApi.this, "GET", REST_PATH, null, com.brahminno.tweetloc.backend.tweetApi.model.RegistrationBean.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetRegistrationDetailUsingKey setAlt(java.lang.String alt) {
      return (GetRegistrationDetailUsingKey) super.setAlt(alt);
    }

    @Override
    public GetRegistrationDetailUsingKey setFields(java.lang.String fields) {
      return (GetRegistrationDetailUsingKey) super.setFields(fields);
    }

    @Override
    public GetRegistrationDetailUsingKey setKey(java.lang.String key) {
      return (GetRegistrationDetailUsingKey) super.setKey(key);
    }

    @Override
    public GetRegistrationDetailUsingKey setOauthToken(java.lang.String oauthToken) {
      return (GetRegistrationDetailUsingKey) super.setOauthToken(oauthToken);
    }

    @Override
    public GetRegistrationDetailUsingKey setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetRegistrationDetailUsingKey) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetRegistrationDetailUsingKey setQuotaUser(java.lang.String quotaUser) {
      return (GetRegistrationDetailUsingKey) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetRegistrationDetailUsingKey setUserIp(java.lang.String userIp) {
      return (GetRegistrationDetailUsingKey) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetRegistrationDetailUsingKey setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetRegistrationDetailUsingKey set(String parameterName, Object value) {
      return (GetRegistrationDetailUsingKey) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeGroup".
   *
   * This request holds the parameters needed by the tweetApi server.  After setting any optional
   * parameters, call the {@link StoreGroup#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.brahminno.tweetloc.backend.tweetApi.model.GroupBean}
   * @return the request
   */
  public StoreGroup storeGroup(com.brahminno.tweetloc.backend.tweetApi.model.GroupBean content) throws java.io.IOException {
    StoreGroup result = new StoreGroup(content);
    initialize(result);
    return result;
  }

  public class StoreGroup extends TweetApiRequest<Void> {

    private static final String REST_PATH = "storeGroup";

    /**
     * Create a request for the method "storeGroup".
     *
     * This request holds the parameters needed by the the tweetApi server.  After setting any
     * optional parameters, call the {@link StoreGroup#execute()} method to invoke the remote
     * operation. <p> {@link
     * StoreGroup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.brahminno.tweetloc.backend.tweetApi.model.GroupBean}
     * @since 1.13
     */
    protected StoreGroup(com.brahminno.tweetloc.backend.tweetApi.model.GroupBean content) {
      super(TweetApi.this, "POST", REST_PATH, content, Void.class);
    }

    @Override
    public StoreGroup setAlt(java.lang.String alt) {
      return (StoreGroup) super.setAlt(alt);
    }

    @Override
    public StoreGroup setFields(java.lang.String fields) {
      return (StoreGroup) super.setFields(fields);
    }

    @Override
    public StoreGroup setKey(java.lang.String key) {
      return (StoreGroup) super.setKey(key);
    }

    @Override
    public StoreGroup setOauthToken(java.lang.String oauthToken) {
      return (StoreGroup) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreGroup setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreGroup) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreGroup setQuotaUser(java.lang.String quotaUser) {
      return (StoreGroup) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreGroup setUserIp(java.lang.String userIp) {
      return (StoreGroup) super.setUserIp(userIp);
    }

    @Override
    public StoreGroup set(String parameterName, Object value) {
      return (StoreGroup) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeLocation".
   *
   * This request holds the parameters needed by the tweetApi server.  After setting any optional
   * parameters, call the {@link StoreLocation#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.brahminno.tweetloc.backend.tweetApi.model.LocationBean}
   * @return the request
   */
  public StoreLocation storeLocation(com.brahminno.tweetloc.backend.tweetApi.model.LocationBean content) throws java.io.IOException {
    StoreLocation result = new StoreLocation(content);
    initialize(result);
    return result;
  }

  public class StoreLocation extends TweetApiRequest<Void> {

    private static final String REST_PATH = "storeLocation";

    /**
     * Create a request for the method "storeLocation".
     *
     * This request holds the parameters needed by the the tweetApi server.  After setting any
     * optional parameters, call the {@link StoreLocation#execute()} method to invoke the remote
     * operation. <p> {@link StoreLocation#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.brahminno.tweetloc.backend.tweetApi.model.LocationBean}
     * @since 1.13
     */
    protected StoreLocation(com.brahminno.tweetloc.backend.tweetApi.model.LocationBean content) {
      super(TweetApi.this, "POST", REST_PATH, content, Void.class);
    }

    @Override
    public StoreLocation setAlt(java.lang.String alt) {
      return (StoreLocation) super.setAlt(alt);
    }

    @Override
    public StoreLocation setFields(java.lang.String fields) {
      return (StoreLocation) super.setFields(fields);
    }

    @Override
    public StoreLocation setKey(java.lang.String key) {
      return (StoreLocation) super.setKey(key);
    }

    @Override
    public StoreLocation setOauthToken(java.lang.String oauthToken) {
      return (StoreLocation) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreLocation setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreLocation) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreLocation setQuotaUser(java.lang.String quotaUser) {
      return (StoreLocation) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreLocation setUserIp(java.lang.String userIp) {
      return (StoreLocation) super.setUserIp(userIp);
    }

    @Override
    public StoreLocation set(String parameterName, Object value) {
      return (StoreLocation) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeRegistration".
   *
   * This request holds the parameters needed by the tweetApi server.  After setting any optional
   * parameters, call the {@link StoreRegistration#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.brahminno.tweetloc.backend.tweetApi.model.RegistrationBean}
   * @return the request
   */
  public StoreRegistration storeRegistration(com.brahminno.tweetloc.backend.tweetApi.model.RegistrationBean content) throws java.io.IOException {
    StoreRegistration result = new StoreRegistration(content);
    initialize(result);
    return result;
  }

  public class StoreRegistration extends TweetApiRequest<Void> {

    private static final String REST_PATH = "storeRegistration";

    /**
     * Create a request for the method "storeRegistration".
     *
     * This request holds the parameters needed by the the tweetApi server.  After setting any
     * optional parameters, call the {@link StoreRegistration#execute()} method to invoke the remote
     * operation. <p> {@link StoreRegistration#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.brahminno.tweetloc.backend.tweetApi.model.RegistrationBean}
     * @since 1.13
     */
    protected StoreRegistration(com.brahminno.tweetloc.backend.tweetApi.model.RegistrationBean content) {
      super(TweetApi.this, "POST", REST_PATH, content, Void.class);
    }

    @Override
    public StoreRegistration setAlt(java.lang.String alt) {
      return (StoreRegistration) super.setAlt(alt);
    }

    @Override
    public StoreRegistration setFields(java.lang.String fields) {
      return (StoreRegistration) super.setFields(fields);
    }

    @Override
    public StoreRegistration setKey(java.lang.String key) {
      return (StoreRegistration) super.setKey(key);
    }

    @Override
    public StoreRegistration setOauthToken(java.lang.String oauthToken) {
      return (StoreRegistration) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreRegistration setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreRegistration) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreRegistration setQuotaUser(java.lang.String quotaUser) {
      return (StoreRegistration) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreRegistration setUserIp(java.lang.String userIp) {
      return (StoreRegistration) super.setUserIp(userIp);
    }

    @Override
    public StoreRegistration set(String parameterName, Object value) {
      return (StoreRegistration) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link TweetApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link TweetApi}. */
    @Override
    public TweetApi build() {
      return new TweetApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link TweetApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setTweetApiRequestInitializer(
        TweetApiRequestInitializer tweetapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(tweetapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
